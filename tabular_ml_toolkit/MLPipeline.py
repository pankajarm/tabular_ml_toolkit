# AUTOGENERATED! DO NOT EDIT! File to edit: 03_MLPipeline.ipynb (unless otherwise specified).

__all__ = ['MLPipeline', 'model', 'pl', 'preds']

# Cell
from .dataframeloader import *
from .preprocessor import *

# Cell
# hide
import pandas as pd
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error

# Cell

class MLPipeline:
    """
    Represent TrainingPipeline class

    Attributes:
    mlpl: A MLPipeline instance
    dfl: A DataFrameLoader instance
    pp: A PreProcessor Instance
    model: The given Model
    """

    def __init__(self):
        self.mlpl = None
        self.dfl = None
        self.pp = None
        self.model = None

    def __str__(self):
        """Returns human readable string reprsentation"""
        return "Training Pipeline object with attributes: pl"

    def __repr__(self):
        return self.__str__()

#     def __lt__(self):
#         """returns: boolean"""
#         return True

    # core methods
    # Bundle preprocessing and modeling code in a training pipeline
    def bundle_preproessor_model(self, preprocessor:object, model:object):
        self.mlpl = Pipeline(steps=[('preprocessor', preprocessor),
                      ('model', model)
                     ])
#     # return pipeline object
#     def create_pipeline(self, preprocessor:object, model:object):
#         self.bundle_preproessor_model(preprocessor, model)

    def prepare_data_for_training(self, train_file_path:str, test_file_path:str, idx_col:str, target:str, valid_size:float, model:object, random_state:int):
        self.model = model
        # call DataFrameLoader module
        self.dfl = DataFrameLoader().from_csv(train_file_path,test_file_path,idx_col,target,valid_size)
        # call PreProcessor module
        self.pp = PreProcessor().preprocess_data(numerical_cols=self.dfl.numerical_cols,
                                    categorical_cols=self.dfl.categorical_cols)

        # call self module method
        self.bundle_preproessor_model(self.pp.column_tranfomer, model)
        return self

# Cell
model = RandomForestRegressor(n_estimators=100, random_state=42)
pl = MLPipeline().prepare_data_for_training(train_file_path= "input/home_data/train.csv",
                                              test_file_path= "input/home_data/test.csv",
                                              idx_col="Id", target="SalePrice",valid_size=0.2,
                                              model=model, random_state=42)
pl.mlpl.fit(pl.dfl.X_train, pl.dfl.y_train)
preds = pl.mlpl.predict(pl.dfl.X_valid)
print('X_valid MAE:', mean_absolute_error(pl.dfl.y_valid, preds))