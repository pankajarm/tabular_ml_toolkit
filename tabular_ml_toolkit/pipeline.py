# AUTOGENERATED! DO NOT EDIT! File to edit: 03_training_pipeline.ipynb (unless otherwise specified).

__all__ = ['TrainingPipeline']

# Cell
from .dataframeloader import *
from .preprocessor import *

# Cell
# hide
import pandas as pd
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error

# Cell

class TrainingPipeline:
    """
    Represent TrainingPipeline class

    Attributes:
    pl: A training pipeline
    """

    def __init__(self):
        self.pl = None

    def __str__(self):
        """Returns human readable string reprsentation"""
        return "Training Pipeline object with attributes: pl"

    def __repr__(self):
        return self.__str__()

#     def __lt__(self):
#         """returns: boolean"""
#         return True

    # core methods
    # Bundle preprocessing and modeling code in a training pipeline
    def bundle_preproessor_model(self, preprocessor:object, model:object):
        self.pl = Pipeline(steps=[('preprocessor', preprocessor),
                      ('model', model)
                     ])
    # return pipeline object
    def create_pipeline(self, preprocessor:object, model:object):
        self.bundle_preproessor_model(preprocessor, model)
        return self.pl