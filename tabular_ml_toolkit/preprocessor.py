# AUTOGENERATED! DO NOT EDIT! File to edit: 01_PreProcessor.ipynb (unless otherwise specified).

__all__ = ['PreProcessor']

# Cell
from .DataFrameLoader import *

# Cell
# hide
import pandas as pd
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import OrdinalEncoder
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error

# Cell

class PreProcessor:
    """
    Represent PreProcessor class

    Attributes:
    numerical_transformer: Numerical Columns Tranformer
    categorical_transformer: Categorical Columns Transformer
    preprocessor: Preprocessor for Columns Tranformer
    """

    def __init__(self):
        self.numerical_transformer = None
        self.categorical_transformer = None
        self.columns_transfomer = None
#         self.numerical_cols = None
#         self.low_card_cat_cols = None
#         self.high_card_cat_cols = None
#         self.final_cols = None

    def __str__(self):
        """Returns human readable string reprsentation"""
        return "PreProcessor object with attributes: numerical_transformer, categorical_transformer, preprocessor"

    def __repr__(self):
        return self.__str__()

#     def __lt__(self):
#         """returns: boolean"""
#         return True

    # PreProcess core methods
    # Preprocessing for numerical data
    def preprocess_numerical_data(self):
        self.numerical_transformer = SimpleImputer(strategy='constant')

    def preprocess_OHE_categorical_data(self):
        self.OHE_categorical_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='most_frequent')),
        ('onehot', OneHotEncoder(handle_unknown='ignore'))
        ])

    def preprocess_ORE_categorical_data(self):
        self.ORE_categorical_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='most_frequent')),
        ('onehot', OrdinalEncoder(handle_unknown='error'))
        ])

    # Bundle preprocessing for numerical and categorical data
    def preprocess_data_for_training(self, numerical_cols, low_card_cat_cols, high_card_cat_cols):
        # create scikit-learn pipelines
        self.preprocess_numerical_data()
        self.preprocess_OHE_categorical_data()
        self.preprocess_ORE_categorical_data()
        # convert to Scikit-learn ColumnTranfomer
        self.columns_transfomer = ColumnTransformer(
            transformers=[
                ('num', self.numerical_transformer, numerical_cols),
                ('low_cad_cat', self.OHE_categorical_transformer, low_card_cat_cols),
                ('high_cad_cat', self.ORE_categorical_transformer, high_card_cat_cols)
            ])
        return self.columns_transfomer

    # Bundle preprocessing for cv_cols
    def preprocess_data_for_cross_validation(self, cv_cols):
                        # change column types and preprocessor according to cv_cols provided
        if cv_cols == "all":
            self.cv_cols = self.dataframeloader.final_columns
            self.preprocess_numerical_data()
            self.preprocess_OHE_categorical_data()
            self.preprocess_ORE_categorical_data()
            # convert to Scikit-learn ColumnTranfomer
            self.columns_transfomer = ColumnTransformer(
                transformers=[
                    ('num', self.numerical_transformer, numerical_cols),
                    ('low_cad_cat', self.OHE_categorical_transformer, low_card_cat_cols),
                    ('high_cad_cat', self.ORE_categorical_transformer, high_card_cat_cols)
                ])
            return self.columns_transfomer
        elif cv_cols == "num":
            self.cv_cols = self.dataframeloader.numerical_cols
            self.preprocess_numerical_data()
            # convert to Scikit-learn ColumnTranfomer
            return self.numerical_transformer
        elif cv_cols == "cat":
            self.cv_cols = (self.dataframeloader.low_card_cat_cols
                            + self.dataframeloader.high_card_cat_cols)
            self.bundle_preproessor_model(self.preprocessor.preprocess_numerical_data,
                                            model)
            return self